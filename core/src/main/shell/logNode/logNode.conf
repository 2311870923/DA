# every log file have two config, one is all log, the other one is usefull log
a1.sources = allr1 allr2 fullr1 fullr2
# all log just have two channel, one is all, the other one is usefull
a1.channels = allc1 fullc1
# collector sinks
a1.sinks = allk1 allk2 fullk1 fullk2
# sink groups, fail-over and load-balance
a1.sinkgroups = g1 g2

# Describe the source for all logs
a1.sources.allr1.type = exec
a1.sources.allr1.command = tail -fn0 /usr/local/nginx-1.4.4/logs/www.example.com_access.log
a1.sources.allr1.interceptors = i1
a1.sources.allr1.interceptors.i1.type = com.iuni.data.analyze.flume.IuniLogInterceptor$Builder
a1.sources.allr1.interceptors.i1.preserveExisting = true
a1.sources.allr1.interceptors.i1.useIP = false
a1.sources.allr1.interceptors.i1.hostHeader = hostname
a1.sources.allr1.interceptors.i1.regex = ^(.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)$
a1.sources.allr1.interceptors.i1.requestTimeIndex = 3

a1.sources.allr2.type = exec
a1.sources.allr2.command = tail -fn0 /usr/local/nginx-1.4.4/logs/www.example.com_access.log
a1.sources.allr2.interceptors = i1
a1.sources.allr2.interceptors.i1.type = com.iuni.data.analyze.flume.IuniLogInterceptor$Builder
a1.sources.allr2.interceptors.i1.preserveExisting = true
a1.sources.allr2.interceptors.i1.useIP = false
a1.sources.allr2.interceptors.i1.hostHeader = hostname
a1.sources.allr2.interceptors.i1.regex = ^(.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)$
a1.sources.allr2.interceptors.i1.requestTimeIndex = 3

# Describe the source for usefull logs
a1.sources.fullr1.type = exec
a1.sources.fullr1.command = tail -fn0 /usr/local/nginx-1.4.4/logs/www.example.com_access.log
a1.sources.fullr1.interceptors = i2
a1.sources.fullr1.interceptors.i2.type = com.iuni.data.analyze.flume.IuniLogInterceptor$Builder
a1.sources.fullr1.interceptors.i2.preserveExisting = true
a1.sources.fullr1.interceptors.i2.useIP = false
a1.sources.fullr1.interceptors.i2.hostHeader = hostname
a1.sources.fullr1.interceptors.i2.regex = ^(.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)$
a1.sources.fullr1.interceptors.i2.urlIndex = 7
a1.sources.fullr1.interceptors.i2.statusIndex = 8
a1.sources.fullr1.interceptors.i2.statusError = false
a1.sources.fullr1.interceptors.i2.requestTimeIndex = 3
a1.sources.fullr1.interceptors.i2.statusRegex = ^2[0-9]{2}$
a1.sources.fullr1.interceptors.i2.static = false
a1.sources.fullr1.interceptors.i2.staticRes = css js jpg jpeg png gif ico img bmp min small
a1.sources.fullr1.interceptors.i2.jpg.specialUrl = specialUrl
a1.sources.fullr1.interceptors.i2.jpeg.specialUrl = specialUrl
a1.sources.fullr1.interceptors.i2.png.specialUrl = specialUrl
a1.sources.fullr1.interceptors.i2.gif.specialUrl = specialUrl
a1.sources.fullr1.interceptors.i2.ico.specialUrl = specialUrl
a1.sources.fullr1.interceptors.i2.img.specialUrl = specialUrl
a1.sources.fullr1.interceptors.i2.bmp.specialUrl = specialUrl

a1.sources.fullr2.type = exec
a1.sources.fullr2.command = tail -fn0 /usr/local/nginx-1.4.4/logs/www.example.com_access.log
a1.sources.fullr2.interceptors = i2
a1.sources.fullr2.interceptors.i2.type = com.iuni.data.analyze.flume.IuniLogInterceptor$Builder
a1.sources.fullr2.interceptors.i2.preserveExisting = true
a1.sources.fullr2.interceptors.i2.useIP = false
a1.sources.fullr2.interceptors.i2.hostHeader = hostname
a1.sources.fullr2.interceptors.i2.regex = ^(.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)\\{\\](.*)$
a1.sources.fullr2.interceptors.i2.urlIndex = 7
a1.sources.fullr2.interceptors.i2.statusIndex = 8
a1.sources.fullr2.interceptors.i2.statusError = false
a1.sources.fullr2.interceptors.i2.requestTimeIndex = 3
a1.sources.fullr2.interceptors.i2.statusRegex = ^2[0-9]{2}$
a1.sources.fullr2.interceptors.i2.static = false
a1.sources.fullr2.interceptors.i2.staticRes = css js jpg jpeg png gif ico img bmp min small
a1.sources.fullr2.interceptors.i2.jpg.specialUrl = specialUrl
a1.sources.fullr2.interceptors.i2.jpeg.specialUrl = specialUrl
a1.sources.fullr2.interceptors.i2.png.specialUrl = specialUrl
a1.sources.fullr2.interceptors.i2.gif.specialUrl = specialUrl
a1.sources.fullr2.interceptors.i2.ico.specialUrl = specialUrl
a1.sources.fullr2.interceptors.i2.img.specialUrl = specialUrl

# Use a channel which buffers events in memory
a1.channels.allc1.type = memory
a1.channels.allc1.keep-alive = 30
a1.channels.allc1.capacity = 500000
a1.channels.allc1.transactionCapacity = 5000
a1.channels.allc1.byteCapacity = 50000000

a1.channels.fullc1.type = memory
a1.channels.fullc1.keep-alive = 30
a1.channels.fullc1.capacity = 500000
a1.channels.fullc1.transactionCapacity = 5000
a1.channels.fullc1.byteCapacity = 50000000

# Describe the avro sink
a1.sinks.allk1.type=avro
a1.sinks.allk1.hostname = 127.0.0.1
a1.sinks.allk1.port = 4141
a1.sinks.allk1.batch-size = 1000

a1.sinks.allk2.type=avro
a1.sinks.allk2.hostname = 127.0.0.1
a1.sinks.allk2.port = 4141
a1.sinks.allk2.batch-size = 1000

a1.sinks.fullk1.type=avro
a1.sinks.fullk1.hostname = 127.0.0.1
a1.sinks.fullk1.port = 4142
a1.sinks.fullk1.batch-size = 1000

a1.sinks.fullk2.type=avro
a1.sinks.fullk2.hostname = 127.0.0.1
a1.sinks.fullk2.port = 4142
a1.sinks.fullk2.batch-size = 1000

# Bind the source and sink to the channel
a1.sources.allr1.channels = allc1
a1.sources.allr2.channels = allc1
a1.sinks.allk1.channel = allc1
a1.sinks.allk2.channel = allc1

a1.sources.fullr1.channels = fullc1
a1.sources.fullr2.channels = fullc1
a1.sinks.fullk1.channel = fullc1
a1.sinks.fullk2.channel = fullc1

# Describe group sinks
a1.sinkgroups.g1.sinks = allk1 allk2
a1.sinkgroups.g1.processor.type = load_balance
a1.sinkgroups.g1.processor.selector = round_robin
a1.sinkgroups.g1.processor.backoff = true

a1.sinkgroups.g2.sinks = fullk1 fullk2
a1.sinkgroups.g2.processor.type = load_balance
a1.sinkgroups.g2.processor.selector = round_robin
a1.sinkgroups.g2.processor.backoff = true

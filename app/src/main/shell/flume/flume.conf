# =================================
# ====== agent of node(iuni.com and m.iuni.com) begin ======
# =================================
node.sources = iuniSrc iuniSrcM
node.sinks = hdfsSink1 hdfsSink2 hdfsSink3 hdfsSink4 hdfsSink5 hdfsSinkM1 hdfsSinkM2 hdfsSinkM3 hdfsSinkM4 hdfsSinkM5
node.channels = hdfsChannel hdfsChannelM
node.sinkgroups = hdfsSinkGroup hdfsSinkGroupM

# node hdfsChannel of iuni
node.channels.hdfsChannel.type = SPILLABLEMEMORY
node.channels.hdfsChannel.memoryCapacity = 1000000
node.channels.hdfsChannel.transactionCapacity = 10000
node.channels.hdfsChannel.overflowCapacity = 100000000
node.channels.hdfsChannel.avgEventSize = 3000
node.channels.hdfsChannel.keep-alive = 10
node.channels.hdfsChannel.write-timeout = 10
node.channels.hdfsChannel.checkpointDir = /data/flume-ng/checkpoint/hdfs
node.channels.hdfsChannel.dataDirs = /data/flume-ng/data/hdfs

# node hdfsChannel of m.iuni
node.channels.hdfsChannelM.type = SPILLABLEMEMORY
node.channels.hdfsChannelM.memoryCapacity = 1000000
node.channels.hdfsChannelM.transactionCapacity = 10000
node.channels.hdfsChannelM.overflowCapacity = 100000000
node.channels.hdfsChannelM.avgEventSize = 3000
node.channels.hdfsChannelM.keep-alive = 10
node.channels.hdfsChannelM.write-timeout = 10
node.channels.hdfsChannelM.checkpointDir = /data/flume-ng/checkpoint/hdfs-m
node.channels.hdfsChannelM.dataDirs = /data/flume-ng/data/hdfs-m

# node iuniSrc of iuni
node.sources.iuniSrc.type = exec
node.sources.iuniSrc.command = tail -fn0 /usr/local/nginx-1.4.4/logs/www.iuni.com_access.log
node.sources.iuniSrc.interceptors = inte
node.sources.iuniSrc.interceptors.inte.type = com.iuni.data.flume.IuniLogInterceptor$Builder
node.sources.iuniSrc.interceptors.inte.startDate = 20150101000000
node.sources.iuniSrc.interceptors.inte.ipLibName = test
node.sources.iuniSrc.interceptors.inte.ipLibConf = /data/flume-ng/plugins.d/iunilog/ipLib.properties
node.sources.iuniSrc.interceptors.inte.adId = AD_ID
node.sources.iuniSrc.interceptors.inte.useIP = false
node.sources.iuniSrc.interceptors.inte.hostHeader = hostname
node.sources.iuniSrc.interceptors.inte.ipIndex = 4
node.sources.iuniSrc.interceptors.inte.urlIndex = 7
node.sources.iuniSrc.interceptors.inte.statusIndex = 8
node.sources.iuniSrc.interceptors.inte.statusError = false
node.sources.iuniSrc.interceptors.inte.requestTimeIndex = 3
node.sources.iuniSrc.interceptors.inte.static = false
node.sources.iuniSrc.interceptors.inte.staticRes = css js jpg jpeg png gif ico img bmp min small
node.sources.iuniSrc.interceptors.inte.staticRes.jpg.specialUrl = specialUrl
node.sources.iuniSrc.interceptors.inte.staticRes.jpeg.specialUrl = specialUrl
node.sources.iuniSrc.interceptors.inte.staticRes.png.specialUrl = specialUrl
node.sources.iuniSrc.interceptors.inte.staticRes.gif.specialUrl = specialUrl
node.sources.iuniSrc.interceptors.inte.staticRes.ico.specialUrl = specialUrl
node.sources.iuniSrc.interceptors.inte.staticRes.img.specialUrl = specialUrl
node.sources.iuniSrc.interceptors.inte.staticRes.bmp.specialUrl = specialUrl
# node iuniSrc channels
node.sources.iuniSrc.channels = hdfsChannel

# node iuniSrc of m.iuni
node.sources.iuniSrcM.type = exec
node.sources.iuniSrcM.command = tail -fn0 /usr/local/nginx-1.4.4/logs/m.iuni.com_access.log
node.sources.iuniSrcM.interceptors = inte
node.sources.iuniSrcM.interceptors.inte.type = com.iuni.data.flume.IuniLogInterceptor$Builder
node.sources.iuniSrcM.interceptors.inte.startDate = 20150101000000
node.sources.iuniSrcM.interceptors.inte.ipLibName = test
node.sources.iuniSrcM.interceptors.inte.ipLibConf = /data/flume-ng/plugins.d/iunilog/ipLib.properties
node.sources.iuniSrcM.interceptors.inte.adId = AD_ID
node.sources.iuniSrcM.interceptors.inte.useIP = false
node.sources.iuniSrcM.interceptors.inte.hostHeader = hostname
node.sources.iuniSrcM.interceptors.inte.ipIndex = 4
node.sources.iuniSrcM.interceptors.inte.urlIndex = 7
node.sources.iuniSrcM.interceptors.inte.statusIndex = 8
node.sources.iuniSrcM.interceptors.inte.statusError = false
node.sources.iuniSrcM.interceptors.inte.requestTimeIndex = 3
node.sources.iuniSrcM.interceptors.inte.static = false
node.sources.iuniSrcM.interceptors.inte.staticRes = css js jpg jpeg png gif ico img bmp min small
node.sources.iuniSrcM.interceptors.inte.staticRes.jpg.specialUrl = specialUrl
node.sources.iuniSrcM.interceptors.inte.staticRes.jpeg.specialUrl = specialUrl
node.sources.iuniSrcM.interceptors.inte.staticRes.png.specialUrl = specialUrl
node.sources.iuniSrcM.interceptors.inte.staticRes.gif.specialUrl = specialUrl
node.sources.iuniSrcM.interceptors.inte.staticRes.ico.specialUrl = specialUrl
node.sources.iuniSrcM.interceptors.inte.staticRes.img.specialUrl = specialUrl
node.sources.iuniSrcM.interceptors.inte.staticRes.bmp.specialUrl = specialUrl
# node iuniSrc channels
node.sources.iuniSrcM.channels = hdfsChannelM

# node hdfsSink1 of iuni
node.sinks.hdfsSink1.type=avro
node.sinks.hdfsSink1.hostname = nn01.hadoop
node.sinks.hdfsSink1.port = 4141
node.sinks.hdfsSink1.batch-size = 1000
# node hdfsSink1 channel
node.sinks.hdfsSink1.channel = hdfsChannel

# node hdfsSink2 of iuni
node.sinks.hdfsSink2.type=avro
node.sinks.hdfsSink2.hostname = nn02.hadoop
node.sinks.hdfsSink2.port = 4141
node.sinks.hdfsSink2.batch-size = 1000
# node hdfsSink2 channel
node.sinks.hdfsSink2.channel = hdfsChannel

# node hdfsSink3 of iuni
node.sinks.hdfsSink3.type=avro
node.sinks.hdfsSink3.hostname = dn01.hadoop
node.sinks.hdfsSink3.port = 4141
node.sinks.hdfsSink3.batch-size = 1000
# node hdfsSink3 channel
node.sinks.hdfsSink3.channel = hdfsChannel

# node hdfsSink4 of iuni
node.sinks.hdfsSink4.type=avro
node.sinks.hdfsSink4.hostname = dn02.hadoop
node.sinks.hdfsSink4.port = 4141
node.sinks.hdfsSink4.batch-size = 1000
# node hdfsSink4 channel
node.sinks.hdfsSink4.channel = hdfsChannel

# node hdfsSink5 of iuni
node.sinks.hdfsSink5.type=avro
node.sinks.hdfsSink5.hostname = dn03.hadoop
node.sinks.hdfsSink5.port = 4141
node.sinks.hdfsSink5.batch-size = 1000
# node hdfsSink5 channel
node.sinks.hdfsSink5.channel = hdfsChannel

# node hdfsSinkM1 of m.iuni
node.sinks.hdfsSinkM1.type=avro
node.sinks.hdfsSinkM1.hostname = nn01.hadoop
node.sinks.hdfsSinkM1.port = 4141
node.sinks.hdfsSinkM1.batch-size = 1000
# node hdfsSinkM1 channel
node.sinks.hdfsSinkM1.channel = hdfsChannelM

# node hdfsSinkM2 of m.iuni
node.sinks.hdfsSinkM2.type=avro
node.sinks.hdfsSinkM2.hostname = nn02.hadoop
node.sinks.hdfsSinkM2.port = 4141
node.sinks.hdfsSinkM2.batch-size = 1000
# node hdfsSinkM2 channel
node.sinks.hdfsSinkM2.channel = hdfsChannelM

# node hdfsSinkM3 of m.iuni
node.sinks.hdfsSinkM3.type=avro
node.sinks.hdfsSinkM3.hostname = dn01.hadoop
node.sinks.hdfsSinkM3.port = 4141
node.sinks.hdfsSinkM3.batch-size = 1000
# node hdfsSinkM3 channel
node.sinks.hdfsSinkM3.channel = hdfsChannelM

# node hdfsSinkM4 of m.iuni
node.sinks.hdfsSinkM4.type=avro
node.sinks.hdfsSinkM4.hostname = dn02.hadoop
node.sinks.hdfsSinkM4.port = 4141
node.sinks.hdfsSinkM4.batch-size = 1000
# node hdfsSinkM4 channel
node.sinks.hdfsSinkM4.channel = hdfsChannelM

# node hdfsSinkM5 of m.iuni
node.sinks.hdfsSinkM5.type=avro
node.sinks.hdfsSinkM5.hostname = dn03.hadoop
node.sinks.hdfsSinkM5.port = 4141
node.sinks.hdfsSinkM5.batch-size = 1000
# node hdfsSinkM5 channel
node.sinks.hdfsSinkM5.channel = hdfsChannelM

# node hdfs sink group of iuni
node.sinkgroups.hdfsSinkGroup.sinks = hdfsSink1 hdfsSink2 hdfsSink3 hdfsSink4 hdfsSink5
node.sinkgroups.hdfsSinkGroup.processor.type = load_balance
node.sinkgroups.hdfsSinkGroup.processor.selector = round_robin
node.sinkgroups.hdfsSinkGroup.processor.backoff = true

# node hdfs sink group of m.iuni
node.sinkgroups.hdfsSinkGroupM.sinks = hdfsSinkM1 hdfsSinkM2 hdfsSinkM3 hdfsSinkM4 hdfsSinkM5
node.sinkgroups.hdfsSinkGroupM.processor.type = load_balance
node.sinkgroups.hdfsSinkGroupM.processor.selector = round_robin
node.sinkgroups.hdfsSinkGroupM.processor.backoff = true

# ===============================
# ====== agent of node end ======
# ===============================





# =================================
# ====== agent of passport nodeP(passport.iuni.com, passport.iunios.com) begin ======
# =================================
nodeP.sources = iuniSrcP iuniSrcPOS
nodeP.sinks = hdfsSinkP1 hdfsSinkP2 hdfsSinkP3 hdfsSinkP4 hdfsSinkP5 hdfsSinkPOS1 hdfsSinkPOS2 hdfsSinkPOS3 hdfsSinkPOS4 hdfsSinkPOS5
nodeP.channels = hdfsChannelP hdfsChannelPOS
nodeP.sinkgroups = hdfsSinkGroupP hdfsSinkGroupPOS

# nodeP hdfsChannelP of passport.iuni.com
nodeP.channels.hdfsChannelP.type = SPILLABLEMEMORY
nodeP.channels.hdfsChannelP.memoryCapacity = 1000000
nodeP.channels.hdfsChannelP.transactionCapacity = 10000
nodeP.channels.hdfsChannelP.overflowCapacity = 100000000
nodeP.channels.hdfsChannelP.avgEventSize = 3000
nodeP.channels.hdfsChannelP.keep-alive = 10
nodeP.channels.hdfsChannelP.write-timeout = 10
nodeP.channels.hdfsChannelP.checkpointDir = /data/flume-ng/checkpoint/hdfsP
nodeP.channels.hdfsChannelP.dataDirs = /data/flume-ng/data/hdfsP

# nodeP hdfsChannelPOS of passport.iunios.com
nodeP.channels.hdfsChannelPOS.type = SPILLABLEMEMORY
nodeP.channels.hdfsChannelPOS.memoryCapacity = 1000000
nodeP.channels.hdfsChannelPOS.transactionCapacity = 10000
nodeP.channels.hdfsChannelPOS.overflowCapacity = 100000000
nodeP.channels.hdfsChannelPOS.avgEventSize = 3000
nodeP.channels.hdfsChannelPOS.keep-alive = 10
nodeP.channels.hdfsChannelPOS.write-timeout = 10
nodeP.channels.hdfsChannelPOS.checkpointDir = /data/flume-ng/checkpoint/hdfsPOS
nodeP.channels.hdfsChannelPOS.dataDirs = /data/flume-ng/data/hdfsPOS

# nodeP iuniSrcP of passport.iuni.com
nodeP.sources.iuniSrcP.type = exec
nodeP.sources.iuniSrcP.command = tail -fn0 /usr/local/nginx-1.4.4/logs/passport.iuni.com_access.log
nodeP.sources.iuniSrcP.interceptors = inte
nodeP.sources.iuniSrcP.interceptors.inte.type = com.iuni.data.flume.IuniLogInterceptor$Builder
nodeP.sources.iuniSrcP.interceptors.inte.startDate = 20150101000000
nodeP.sources.iuniSrcP.interceptors.inte.ipLibName = test
nodeP.sources.iuniSrcP.interceptors.inte.ipLibConf = /data/flume-ng/plugins.d/iunilog/ipLib.properties
nodeP.sources.iuniSrcP.interceptors.inte.adId = AD_ID
nodeP.sources.iuniSrcP.interceptors.inte.useIP = false
nodeP.sources.iuniSrcP.interceptors.inte.hostHeader = hostname
nodeP.sources.iuniSrcP.interceptors.inte.ipIndex = 4
nodeP.sources.iuniSrcP.interceptors.inte.urlIndex = 7
nodeP.sources.iuniSrcP.interceptors.inte.statusIndex = 8
nodeP.sources.iuniSrcP.interceptors.inte.statusError = false
nodeP.sources.iuniSrcP.interceptors.inte.requestTimeIndex = 3
nodeP.sources.iuniSrcP.interceptors.inte.static = false
nodeP.sources.iuniSrcP.interceptors.inte.staticRes = css js jpg jpeg png gif ico img bmp min small
nodeP.sources.iuniSrcP.interceptors.inte.staticRes.jpg.specialUrl = specialUrl
nodeP.sources.iuniSrcP.interceptors.inte.staticRes.jpeg.specialUrl = specialUrl
nodeP.sources.iuniSrcP.interceptors.inte.staticRes.png.specialUrl = specialUrl
nodeP.sources.iuniSrcP.interceptors.inte.staticRes.gif.specialUrl = specialUrl
nodeP.sources.iuniSrcP.interceptors.inte.staticRes.ico.specialUrl = specialUrl
nodeP.sources.iuniSrcP.interceptors.inte.staticRes.img.specialUrl = specialUrl
nodeP.sources.iuniSrcP.interceptors.inte.staticRes.bmp.specialUrl = specialUrl
# nodeP iuniSrcP channels
nodeP.sources.iuniSrcP.channels = hdfsChannelP

# nodeP iuniSrcPOS of passport.iunios.com
nodeP.sources.iuniSrcPOS.type = exec
nodeP.sources.iuniSrcPOS.command = tail -fn0 /usr/local/nginx-1.4.4/logs/passport.iunios.com_access.log
nodeP.sources.iuniSrcPOS.interceptors = inte
nodeP.sources.iuniSrcPOS.interceptors.inte.type = com.iuni.data.flume.IuniLogInterceptor$Builder
nodeP.sources.iuniSrcPOS.interceptors.inte.startDate = 20150101000000
nodeP.sources.iuniSrcPOS.interceptors.inte.ipLibName = test
nodeP.sources.iuniSrcPOS.interceptors.inte.ipLibConf = /data/flume-ng/plugins.d/iunilog/ipLib.properties
nodeP.sources.iuniSrcPOS.interceptors.inte.adId = AD_ID
nodeP.sources.iuniSrcPOS.interceptors.inte.useIP = false
nodeP.sources.iuniSrcPOS.interceptors.inte.hostHeader = hostname
nodeP.sources.iuniSrcPOS.interceptors.inte.ipIndex = 4
nodeP.sources.iuniSrcPOS.interceptors.inte.urlIndex = 7
nodeP.sources.iuniSrcPOS.interceptors.inte.statusIndex = 8
nodeP.sources.iuniSrcPOS.interceptors.inte.statusError = false
nodeP.sources.iuniSrcPOS.interceptors.inte.requestTimeIndex = 3
nodeP.sources.iuniSrcPOS.interceptors.inte.static = false
nodeP.sources.iuniSrcPOS.interceptors.inte.staticRes = css js jpg jpeg png gif ico img bmp min small
nodeP.sources.iuniSrcPOS.interceptors.inte.staticRes.jpg.specialUrl = specialUrl
nodeP.sources.iuniSrcPOS.interceptors.inte.staticRes.jpeg.specialUrl = specialUrl
nodeP.sources.iuniSrcPOS.interceptors.inte.staticRes.png.specialUrl = specialUrl
nodeP.sources.iuniSrcPOS.interceptors.inte.staticRes.gif.specialUrl = specialUrl
nodeP.sources.iuniSrcPOS.interceptors.inte.staticRes.ico.specialUrl = specialUrl
nodeP.sources.iuniSrcPOS.interceptors.inte.staticRes.img.specialUrl = specialUrl
nodeP.sources.iuniSrcPOS.interceptors.inte.staticRes.bmp.specialUrl = specialUrl
# nodeP iuniSrcPOS channels
nodeP.sources.iuniSrcPOS.channels = hdfsChannelPOS

# nodeP hdfsSinkP1 of passport.iuni.com
nodeP.sinks.hdfsSinkP1.type=avro
nodeP.sinks.hdfsSinkP1.hostname = nn01.hadoop
nodeP.sinks.hdfsSinkP1.port = 4141
nodeP.sinks.hdfsSinkP1.batch-size = 1000
# nodeP hdfsSinkP1 channel
nodeP.sinks.hdfsSinkP1.channel = hdfsChannelP

# nodeP hdfsSinkP2 of passport.iuni.com
nodeP.sinks.hdfsSinkP2.type=avro
nodeP.sinks.hdfsSinkP2.hostname = nn02.hadoop
nodeP.sinks.hdfsSinkP2.port = 4141
nodeP.sinks.hdfsSinkP2.batch-size = 1000
# nodeP hdfsSinkP2 channel
nodeP.sinks.hdfsSinkP2.channel = hdfsChannelP

# nodeP hdfsSinkP3 of passport.iuni.com
nodeP.sinks.hdfsSinkP3.type=avro
nodeP.sinks.hdfsSinkP3.hostname = dn01.hadoop
nodeP.sinks.hdfsSinkP3.port = 4141
nodeP.sinks.hdfsSinkP3.batch-size = 1000
# nodeP hdfsSinkP3 channel
nodeP.sinks.hdfsSinkP3.channel = hdfsChannelP

# nodeP hdfsSinkP4 of passport.iuni.com
nodeP.sinks.hdfsSinkP4.type=avro
nodeP.sinks.hdfsSinkP4.hostname = dn02.hadoop
nodeP.sinks.hdfsSinkP4.port = 4141
nodeP.sinks.hdfsSinkP4.batch-size = 1000
# nodeP hdfsSinkP4 channel
nodeP.sinks.hdfsSinkP4.channel = hdfsChannelP

# nodeP hdfsSinkP5 of passport.iuni.com
nodeP.sinks.hdfsSinkP5.type=avro
nodeP.sinks.hdfsSinkP5.hostname = dn03.hadoop
nodeP.sinks.hdfsSinkP5.port = 4141
nodeP.sinks.hdfsSinkP5.batch-size = 1000
# nodeP hdfsSinkP5 channel
nodeP.sinks.hdfsSinkP5.channel = hdfsChannelP

# nodeP hdfsSinkPOS1 of passport.iunios.com
nodeP.sinks.hdfsSinkPOS1.type=avro
nodeP.sinks.hdfsSinkPOS1.hostname = nn01.hadoop
nodeP.sinks.hdfsSinkPOS1.port = 4141
nodeP.sinks.hdfsSinkPOS1.batch-size = 1000
# nodeP hdfsSinkPOS1 channel
nodeP.sinks.hdfsSinkPOS1.channel = hdfsChannelPOS

# nodeP hdfsSinkPOS2 of passport.iunios.com
nodeP.sinks.hdfsSinkPOS2.type=avro
nodeP.sinks.hdfsSinkPOS2.hostname = nn02.hadoop
nodeP.sinks.hdfsSinkPOS2.port = 4141
nodeP.sinks.hdfsSinkPOS2.batch-size = 1000
# nodeP hdfsSinkPOS2 channel
nodeP.sinks.hdfsSinkPOS2.channel = hdfsChannelPOS

# nodeP hdfsSinkPOS3 of passport.iunios.com
nodeP.sinks.hdfsSinkPOS3.type=avro
nodeP.sinks.hdfsSinkPOS3.hostname = dn01.hadoop
nodeP.sinks.hdfsSinkPOS3.port = 4141
nodeP.sinks.hdfsSinkPOS3.batch-size = 1000
# nodeP hdfsSinkPOS3 channel
nodeP.sinks.hdfsSinkPOS3.channel = hdfsChannelPOS

# nodeP hdfsSinkPOS4 of passport.iunios.com
nodeP.sinks.hdfsSinkPOS4.type=avro
nodeP.sinks.hdfsSinkPOS4.hostname = dn02.hadoop
nodeP.sinks.hdfsSinkPOS4.port = 4141
nodeP.sinks.hdfsSinkPOS4.batch-size = 1000
# nodeP hdfsSinkPOS4 channel
nodeP.sinks.hdfsSinkPOS4.channel = hdfsChannelPOS

# nodeP hdfsSinkPOS5 of passport.iunios.com
nodeP.sinks.hdfsSinkPOS5.type=avro
nodeP.sinks.hdfsSinkPOS5.hostname = dn03.hadoop
nodeP.sinks.hdfsSinkPOS5.port = 4141
nodeP.sinks.hdfsSinkPOS5.batch-size = 1000
# nodeP hdfsSinkPOS5 channel
nodeP.sinks.hdfsSinkPOS5.channel = hdfsChannelPOS

# nodeP hdfs sink group of passport.iuni.com
nodeP.sinkgroups.hdfsSinkGroupP.sinks = hdfsSinkP1 hdfsSinkP2 hdfsSinkP3 hdfsSinkP4 hdfsSinkP5
nodeP.sinkgroups.hdfsSinkGroupP.processor.type = load_balance
nodeP.sinkgroups.hdfsSinkGroupP.processor.selector = round_robin
nodeP.sinkgroups.hdfsSinkGroupP.processor.backoff = true

# nodeP hdfs sink group of passport.iuni.com
nodeP.sinkgroups.hdfsSinkGroupPOS.sinks = hdfsSinkPOS1 hdfsSinkPOS2 hdfsSinkPOS3 hdfsSinkPOS4 hdfsSinkPOS5
nodeP.sinkgroups.hdfsSinkGroupPOS.processor.type = load_balance
nodeP.sinkgroups.hdfsSinkGroupPOS.processor.selector = round_robin
nodeP.sinkgroups.hdfsSinkGroupPOS.processor.backoff = true
# ===============================
# ====== agent of nodeP end ======
# ===============================





# ======================================
# ====== agent of collector begin ======
# ======================================
collector.sources = collectorSource
collector.sinks = hdfsSink
collector.channels = hdfsChannel

# collector hdfsChannel
collector.channels.hdfsChannel.type = SPILLABLEMEMORY
collector.channels.hdfsChannel.memoryCapacity = 1000000
collector.channels.hdfsChannel.transactionCapacity = 10000
collector.channels.hdfsChannel.overflowCapacity = 100000000
collector.channels.hdfsChannel.avgEventSize = 3000
collector.channels.hdfsChannel.keep-alive = 10
collector.channels.hdfsChannel.write-timeout = 10
collector.channels.hdfsChannel.checkpointDir = /data/flume-ng/checkpoint/hdfs
collector.channels.hdfsChannel.dataDirs = /data/flume-ng/data/hdfs

# collector collectorSource
collector.sources.collectorSource.type = avro
collector.sources.collectorSource.bind = 0.0.0.0
collector.sources.collectorSource.port = 4141
# collector collectorSource channels
collector.sources.collectorSource.channels = hdfsChannel

# collector hdfsSink
collector.sinks.hdfsSink.type = hdfs
collector.sinks.hdfsSink.hdfs.path = hdfs://iuniHdfsCluster/flume/logs/use=%{suffixUsable}/time=%Y%m%d
collector.sinks.hdfsSink.hdfs.fileType = DataStream
collector.sinks.hdfsSink.hdfs.filePrefix = iuni
collector.sinks.hdfsSink.hdfs.fileSuffix = .log
collector.sinks.hdfsSink.hdfs.inUsePrefix = _
collector.sinks.hdfsSink.hdfs.batchSize = 10000
collector.sinks.hdfsSink.hdfs.rollInterval = 30
collector.sinks.hdfsSink.hdfs.rollSize = 0
collector.sinks.hdfsSink.hdfs.rollCount = 10000
collector.sinks.hdfsSink.serializer = com.iuni.data.flume.IuniLogTextSerializer$Builder
# collector hdfsSink channel
collector.sinks.hdfsSink.channel = hdfsChannel

# ====================================
# ====== agent of collector end ======
# ====================================




# ====================================
# ====== agent of history begin ======
# ====================================
history.sources = historySrc
history.sinks = hdfsSink
history.channels = hdfsChannel

# history hdfsChannel
history.channels.hdfsChannel.type = SPILLABLEMEMORY
history.channels.hdfsChannel.memoryCapacity = 1000000
history.channels.hdfsChannel.transactionCapacity = 10000
history.channels.hdfsChannel.overflowCapacity = 100000000
history.channels.hdfsChannel.avgEventSize = 3000
history.channels.hdfsChannel.keep-alive = 10
history.channels.hdfsChannel.write-timeout = 10
history.channels.hdfsChannel.checkpointDir = /data/flume-ng/checkpoint/hdfs
history.channels.hdfsChannel.dataDirs = /data/flume-ng/data/hdfs

# history historySrc
history.sources.historySrc.type = avro
history.sources.historySrc.bind = 0.0.0.0
history.sources.historySrc.port = 14141
history.sources.historySrc.interceptors = inte
history.sources.historySrc.interceptors.inte.type = com.iuni.data.flume.IuniLogInterceptor$Builder
history.sources.historySrc.interceptors.inte.startDate = 20130101000000
history.sources.historySrc.interceptors.inte.ipLibName = test
history.sources.historySrc.interceptors.inte.ipLibConf = /data/flume-ng/plugins.d/iunilog/ipLib.properties
history.sources.historySrc.interceptors.inte.adId = AD_ID
history.sources.historySrc.interceptors.inte.useIP = false
history.sources.historySrc.interceptors.inte.hostHeader = hostname
history.sources.historySrc.interceptors.inte.ipIndex = 4
history.sources.historySrc.interceptors.inte.urlIndex = 7
history.sources.historySrc.interceptors.inte.statusIndex = 8
history.sources.historySrc.interceptors.inte.cookieIndex = 15
history.sources.historySrc.interceptors.inte.statusError = false
history.sources.historySrc.interceptors.inte.requestTimeIndex = 3
history.sources.historySrc.interceptors.inte.static = false
history.sources.historySrc.interceptors.inte.staticRes = css js jpg jpeg png gif ico img bmp min small
history.sources.historySrc.interceptors.inte.staticRes.jpg.specialUrl = specialUrl
history.sources.historySrc.interceptors.inte.staticRes.jpeg.specialUrl = specialUrl
history.sources.historySrc.interceptors.inte.staticRes.png.specialUrl = specialUrl
history.sources.historySrc.interceptors.inte.staticRes.gif.specialUrl = specialUrl
history.sources.historySrc.interceptors.inte.staticRes.ico.specialUrl = specialUrl
history.sources.historySrc.interceptors.inte.staticRes.img.specialUrl = specialUrl
history.sources.historySrc.interceptors.inte.staticRes.bmp.specialUrl = specialUrl
# node iuniSrc channels
history.sources.historySrc.channels = hdfsChannel

# history hdfsSink
history.sinks.hdfsSink.type = hdfs
history.sinks.hdfsSink.hdfs.path = hdfs://iuniHdfsCluster/flume/logs/use=%{suffixUsable}/time=%Y%m%d
history.sinks.hdfsSink.hdfs.fileType = DataStream
history.sinks.hdfsSink.hdfs.filePrefix = iuni
history.sinks.hdfsSink.hdfs.fileSuffix = .log
history.sinks.hdfsSink.hdfs.inUsePrefix = _
history.sinks.hdfsSink.hdfs.batchSize = 10000
history.sinks.hdfsSink.hdfs.rollInterval = 60
history.sinks.hdfsSink.hdfs.rollSize = 0
history.sinks.hdfsSink.hdfs.rollCount = 10000
history.sinks.hdfsSink.serializer = com.iuni.data.flume.IuniLogTextSerializer$Builder
# history hdfsSink channel
history.sinks.hdfsSink.channel = hdfsChannel

# ==================================
# ====== agent of history end ======
# ==================================




# ====================================
# ====== agent of os report log history begin ======
# ====================================
OSReportLogHistory.sources = OSReportLogHistorySrc
OSReportLogHistory.sinks = hdfsSink
OSReportLogHistory.channels = hdfsChannel

# os report log history hdfsChannel
OSReportLogHistory.channels.hdfsChannel.type = SPILLABLEMEMORY
OSReportLogHistory.channels.hdfsChannel.memoryCapacity = 1000000
OSReportLogHistory.channels.hdfsChannel.transactionCapacity = 10000
OSReportLogHistory.channels.hdfsChannel.overflowCapacity = 100000000
OSReportLogHistory.channels.hdfsChannel.avgEventSize = 3000
OSReportLogHistory.channels.hdfsChannel.keep-alive = 10
OSReportLogHistory.channels.hdfsChannel.write-timeout = 10
OSReportLogHistory.channels.hdfsChannel.checkpointDir = /data/flume-ng/os-report/checkpoint/hdfs
OSReportLogHistory.channels.hdfsChannel.dataDirs = /data/flume-ng/os-report/data/hdfs

# os report log history OSReportLogHistorySrc
OSReportLogHistory.sources.OSReportLogHistorySrc.type = avro
OSReportLogHistory.sources.OSReportLogHistorySrc.bind = 0.0.0.0
OSReportLogHistory.sources.OSReportLogHistorySrc.port = 24141
OSReportLogHistory.sources.OSReportLogHistorySrc.interceptors = inte
OSReportLogHistory.sources.OSReportLogHistorySrc.interceptors.inte.type = com.iuni.data.flume.IuniOSReportLogInterceptor$Builder
OSReportLogHistory.sources.OSReportLogHistorySrc.interceptors.inte.startDate = 20130101000000
OSReportLogHistory.sources.OSReportLogHistorySrc.interceptors.inte.useIP = false
# node iuniSrc channels
OSReportLogHistory.sources.OSReportLogHistorySrc.channels = hdfsChannel

# os report log history hdfsSink
OSReportLogHistory.sinks.hdfsSink.type = hdfs
OSReportLogHistory.sinks.hdfsSink.hdfs.path = hdfs://iuniHdfsCluster/flume/os-report/time=%Y%m%d
OSReportLogHistory.sinks.hdfsSink.hdfs.fileType = DataStream
OSReportLogHistory.sinks.hdfsSink.hdfs.filePrefix = os-report
OSReportLogHistory.sinks.hdfsSink.hdfs.fileSuffix = .log
OSReportLogHistory.sinks.hdfsSink.hdfs.inUsePrefix = _
OSReportLogHistory.sinks.hdfsSink.hdfs.batchSize = 10000
OSReportLogHistory.sinks.hdfsSink.hdfs.rollInterval = 600
OSReportLogHistory.sinks.hdfsSink.hdfs.rollSize = 100000000
OSReportLogHistory.sinks.hdfsSink.hdfs.rollCount = 1000000
# OSReportLogHistory hdfsSink channel
OSReportLogHistory.sinks.hdfsSink.channel = hdfsChannel

# ==================================
# ====== agent of os report log history end ======
# ==================================




